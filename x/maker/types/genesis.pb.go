// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: blackfury/maker/v1/genesis.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the maker module's genesis state.
type GenesisState struct {
	Params       Params                                 `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	BackingRatio github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=backing_ratio,json=backingRatio,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"backing_ratio" yaml:"backing_ratio"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_13c9e1f50fe955ba, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// Params defines the parameters for the maker module.
type Params struct {
	// step of adjusting backing ratio
	BackingRatioStep github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=backing_ratio_step,json=backingRatioStep,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"backing_ratio_step" yaml:"backing_ratio_step"`
	// price band for adjusting backing ratio
	BackingRatioPriceBand github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=backing_ratio_price_band,json=backingRatioPriceBand,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"backing_ratio_price_band" yaml:"backing_ratio_price_band"`
	// cooldown period for adjusting backing ratio
	BackingRatioCooldownPeriod int64 `protobuf:"varint,3,opt,name=backing_ratio_cooldown_period,json=backingRatioCooldownPeriod,proto3" json:"backing_ratio_cooldown_period,omitempty" yaml:"backing_ratio_cooldown_period"`
	// mint Black price bias ratio
	MintPriceBias github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=mint_price_bias,json=mintPriceBias,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"mint_price_bias" yaml:"mint_price_bias"`
	// burn Black price bias ratio
	BurnPriceBias github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=burn_price_bias,json=burnPriceBias,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_price_bias" yaml:"burn_price_bias"`
	// reback bonus ratio
	RebackBonus github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,6,opt,name=reback_bonus,json=rebackBonus,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"reback_bonus" yaml:"reback_bonus"`
	// liquidation commission fee ratio
	LiquidationCommissionFee github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,7,opt,name=liquidation_commission_fee,json=liquidationCommissionFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidation_commission_fee" yaml:"liquidation_commission_fee"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_13c9e1f50fe955ba, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBackingRatioCooldownPeriod() int64 {
	if m != nil {
		return m.BackingRatioCooldownPeriod
	}
	return 0
}

func init() {
	proto.RegisterType((*GenesisState)(nil), "blackfury.maker.v1.GenesisState")
	proto.RegisterType((*Params)(nil), "blackfury.maker.v1.Params")
}

func init() { proto.RegisterFile("blackfury/maker/v1/genesis.proto", fileDescriptor_13c9e1f50fe955ba) }

var fileDescriptor_13c9e1f50fe955ba = []byte{
	// 531 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x94, 0x31, 0x6f, 0xd3, 0x4e,
	0x18, 0xc6, 0x73, 0xff, 0xf6, 0x1f, 0xe8, 0x35, 0x11, 0xe8, 0x28, 0xc8, 0x44, 0xc2, 0x0e, 0x27,
	0x84, 0xb2, 0x60, 0xab, 0xb0, 0xa0, 0x8e, 0x2e, 0x94, 0x4a, 0x2c, 0xe1, 0xb2, 0xb1, 0x58, 0x67,
	0xfb, 0x92, 0x9e, 0x1c, 0xfb, 0x8c, 0xcf, 0x69, 0xc9, 0x57, 0x60, 0x82, 0x8d, 0xb1, 0x5f, 0x82,
	0xef, 0xd0, 0xb1, 0x23, 0x62, 0x88, 0x50, 0xb2, 0xc0, 0xda, 0x4f, 0x80, 0xee, 0x6c, 0x1a, 0x27,
	0x84, 0xc1, 0x62, 0xb2, 0xdf, 0x7b, 0x9f, 0x7b, 0x7e, 0xcf, 0x7b, 0xc3, 0x0b, 0xbb, 0xfe, 0x98,
	0x06, 0xd1, 0x70, 0x92, 0x4d, 0x9d, 0x98, 0x46, 0x2c, 0x73, 0x4e, 0xf7, 0x9d, 0x11, 0x4b, 0x98,
	0xe4, 0xd2, 0x4e, 0x33, 0x91, 0x0b, 0x84, 0xae, 0x15, 0xb6, 0x56, 0xd8, 0xa7, 0xfb, 0x9d, 0xbd,
	0x91, 0x18, 0x09, 0xdd, 0x76, 0xd4, 0x5f, 0xa1, 0xc4, 0x5f, 0x00, 0x6c, 0xbd, 0x2a, 0xee, 0x0e,
	0x72, 0x9a, 0x33, 0xf4, 0x1c, 0x36, 0x53, 0x9a, 0xd1, 0x58, 0x1a, 0xa0, 0x0b, 0x7a, 0xbb, 0x4f,
	0x3b, 0xf6, 0x9f, 0x5e, 0x76, 0x5f, 0x2b, 0xdc, 0xed, 0x8b, 0x99, 0xd5, 0x20, 0xa5, 0x1e, 0x45,
	0xb0, 0xed, 0xd3, 0x20, 0xe2, 0xc9, 0xc8, 0xcb, 0x68, 0xce, 0x85, 0xf1, 0x5f, 0x17, 0xf4, 0x76,
	0xdc, 0x23, 0x25, 0xfa, 0x36, 0xb3, 0x1e, 0x8f, 0x78, 0x7e, 0x32, 0xf1, 0xed, 0x40, 0xc4, 0x4e,
	0x20, 0x64, 0x2c, 0x64, 0xf9, 0x79, 0x22, 0xc3, 0xc8, 0xc9, 0xa7, 0x29, 0x93, 0xf6, 0x0b, 0x16,
	0x5c, 0xcd, 0xac, 0xbd, 0x29, 0x8d, 0xc7, 0x07, 0x78, 0xc5, 0x0c, 0x93, 0x56, 0x59, 0x13, 0x5d,
	0xfe, 0x6c, 0xc2, 0x66, 0x91, 0x02, 0x4d, 0x21, 0x5a, 0x91, 0x7a, 0x32, 0x67, 0xa9, 0x4e, 0xbf,
	0xe3, 0xbe, 0xae, 0x0d, 0xbf, 0xbf, 0x01, 0xae, 0x1d, 0x31, 0xb9, 0x5d, 0x4d, 0x30, 0xc8, 0x59,
	0x8a, 0x3e, 0x00, 0x68, 0xac, 0x2a, 0xd3, 0x8c, 0x07, 0xcc, 0xf3, 0x69, 0x12, 0x96, 0xe3, 0xbf,
	0xa9, 0x9d, 0xc0, 0xda, 0x94, 0x60, 0xe9, 0x8b, 0xc9, 0xdd, 0x6a, 0x8e, 0xbe, 0x6a, 0xb8, 0x34,
	0x09, 0x51, 0x04, 0x1f, 0xac, 0xde, 0x09, 0x84, 0x18, 0x87, 0xe2, 0x2c, 0xf1, 0x52, 0x96, 0x71,
	0x11, 0x1a, 0x5b, 0x5d, 0xd0, 0xdb, 0x72, 0x7b, 0x57, 0x33, 0xeb, 0xd1, 0x26, 0xc4, 0x9a, 0x1c,
	0x93, 0x4e, 0x95, 0x73, 0x58, 0x76, 0xfb, 0xba, 0x89, 0x52, 0x78, 0x2b, 0xe6, 0x49, 0xfe, 0x3b,
	0x17, 0xa7, 0xd2, 0xd8, 0xd6, 0xf3, 0x1e, 0xd7, 0x9e, 0xf7, 0x5e, 0x11, 0x66, 0xcd, 0x0e, 0x93,
	0xb6, 0x3a, 0x29, 0xc6, 0xe3, 0x54, 0x2a, 0xa2, 0x3f, 0xc9, 0x92, 0x2a, 0xf1, 0xff, 0x7f, 0x23,
	0xae, 0xd9, 0x61, 0xd2, 0x56, 0x27, 0x4b, 0xe2, 0x09, 0x6c, 0x65, 0x4c, 0xbd, 0x81, 0xe7, 0x8b,
	0x64, 0x22, 0x8d, 0xa6, 0xc6, 0xbd, 0xac, 0x8d, 0xbb, 0x53, 0xe0, 0xaa, 0x5e, 0x98, 0xec, 0x16,
	0xa5, 0xab, 0x2a, 0xf4, 0x09, 0xc0, 0xce, 0x98, 0xbf, 0x9b, 0xf0, 0x50, 0x3d, 0x75, 0xe2, 0x05,
	0x22, 0x8e, 0xb9, 0x94, 0xea, 0x77, 0xc8, 0x98, 0x71, 0x43, 0x83, 0x07, 0xb5, 0xc1, 0x0f, 0x0b,
	0xf0, 0xdf, 0x9d, 0x31, 0x31, 0x2a, 0xcd, 0xc3, 0xeb, 0xde, 0x11, 0x63, 0x07, 0x37, 0x3f, 0x9f,
	0x5b, 0x8d, 0x1f, 0xe7, 0x16, 0x70, 0x8f, 0x2f, 0xe6, 0x26, 0xb8, 0x9c, 0x9b, 0xe0, 0xfb, 0xdc,
	0x04, 0x1f, 0x17, 0x66, 0xe3, 0x72, 0x61, 0x36, 0xbe, 0x2e, 0xcc, 0xc6, 0x5b, 0xbb, 0x12, 0x45,
	0x0c, 0x87, 0x92, 0x87, 0x4c, 0x9e, 0xd1, 0xd4, 0x59, 0x2e, 0xa8, 0xf7, 0xe5, 0x8a, 0xd2, 0xb1,
	0xfc, 0xa6, 0x5e, 0x3a, 0xcf, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0xd3, 0x02, 0xcb, 0x8c, 0xc2,
	0x04, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.BackingRatioStep.Equal(that1.BackingRatioStep) {
		return false
	}
	if !this.BackingRatioPriceBand.Equal(that1.BackingRatioPriceBand) {
		return false
	}
	if this.BackingRatioCooldownPeriod != that1.BackingRatioCooldownPeriod {
		return false
	}
	if !this.MintPriceBias.Equal(that1.MintPriceBias) {
		return false
	}
	if !this.BurnPriceBias.Equal(that1.BurnPriceBias) {
		return false
	}
	if !this.RebackBonus.Equal(that1.RebackBonus) {
		return false
	}
	if !this.LiquidationCommissionFee.Equal(that1.LiquidationCommissionFee) {
		return false
	}
	return true
}
func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.BackingRatio.Size()
		i -= size
		if _, err := m.BackingRatio.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.LiquidationCommissionFee.Size()
		i -= size
		if _, err := m.LiquidationCommissionFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size := m.RebackBonus.Size()
		i -= size
		if _, err := m.RebackBonus.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size := m.BurnPriceBias.Size()
		i -= size
		if _, err := m.BurnPriceBias.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MintPriceBias.Size()
		i -= size
		if _, err := m.MintPriceBias.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.BackingRatioCooldownPeriod != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.BackingRatioCooldownPeriod))
		i--
		dAtA[i] = 0x18
	}
	{
		size := m.BackingRatioPriceBand.Size()
		i -= size
		if _, err := m.BackingRatioPriceBand.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.BackingRatioStep.Size()
		i -= size
		if _, err := m.BackingRatioStep.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.BackingRatio.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.BackingRatioStep.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.BackingRatioPriceBand.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.BackingRatioCooldownPeriod != 0 {
		n += 1 + sovGenesis(uint64(m.BackingRatioCooldownPeriod))
	}
	l = m.MintPriceBias.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.BurnPriceBias.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.RebackBonus.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.LiquidationCommissionFee.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingRatio", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingRatio.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingRatioStep", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingRatioStep.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingRatioPriceBand", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BackingRatioPriceBand.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BackingRatioCooldownPeriod", wireType)
			}
			m.BackingRatioCooldownPeriod = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BackingRatioCooldownPeriod |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MintPriceBias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MintPriceBias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnPriceBias", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnPriceBias.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RebackBonus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RebackBonus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationCommissionFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidationCommissionFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
